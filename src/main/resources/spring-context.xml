<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:maple="http://maple-springtag.dapeng.com/schema/maple"
       xmlns:bus="http://www.dapeng.com/schema/bus"

       xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
        http://maple-springtag.dapeng.com/schema/maple
        http://maple-springtag.dapeng.com/schema/maple/maple.xsd
        http://www.dapeng.com/schema/bus
        http://www.dapeng.com/schema/bus/event-bus-2.0.4.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

    <!-- 读取配置文件 -->
    <context:property-placeholder location="classpath:app.properties" local-override="false"
                                  system-properties-mode="ENVIRONMENT"/>

    <!-- Enables the Spring MVC @Controller programming model -->
    <!--
    <mvc:annotation-driven /> 会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean,
    是spring MVC为@Controllers分发请求所必须的。并提供了：数据绑定支持，@NumberFormatannotation支持，@DateTimeFormat支持，@Valid支持，
    读写XML的支持（JAXB），读写JSON的支持（Jackson）。后面，我们处理响应ajax请求时，就使用到了对json的支持。
    后面，对action写JUnit单元测试时，要从spring IOC容器中取DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 两个bean，
    来完成测试，取的时候要知道是<mvc:annotation-driven />这一句注册的这两个bean。

 -->
    <mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
        <mvc:message-converters register-defaults="true">
            <ref bean="stringConverter"/>
        </mvc:message-converters>
    </mvc:annotation-driven>

    <!--内容协商-->
    <bean id="contentNegotiationManager"
          class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="favorPathExtension" value="false"/>
    </bean>

    <bean id="jsonConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"/>

    <bean id="stringConverter"
          class="org.springframework.http.converter.StringHttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>text/plain;charset=UTF-8</value>
                <value>application/json;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射，解决@ResponseBody乱码问题 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
        <property name="messageConverters">
            <list>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter">
                    <property name="supportedMediaTypes">
                        <list>
                            <value>text/html;charset=UTF-8</value>
                            <value>text/plain;charset=UTF-8</value>
                            <value>application/json;charset=UTF-8</value>
                        </list>
                    </property>
                </bean>
            </list>
        </property>
    </bean>

    <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/"/>
        <property name="suffix" value=".jsp"/>
    </bean>


    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="10240000"/> <!-- 最大上传大小，单位为字节-->
    </bean>

    <!-- 扫描包 -->
    <context:component-scan base-package="com.maple.mvc">
        <context:exclude-filter type="annotation" expression="com.maple.mvc.beans.context.MvcBean"/>
    </context:component-scan>


    <!--dao-->
    <!--===============================h2 DataSource start=============================-->
    <bean id="h2_dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
          destroy-method="close">
        <!--基本属性 url、user、password配置-->
        <property name="driverClassName" value="org.h2.Driver"/>
        <property name="url" value="${DB_H2DB_URL}"/>
        <property name="username" value="${DB_H2DB_USER}"/>
        <property name="password" value="${DB_H2DB_PASSWD}"/>

        <!--配置初始化大小、最小、最大-->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="50"/>

        <!--配置获取连接等待超时的时间-->
        <property name="maxWait" value="10000"/>

        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
    </bean>

    <bean id="tx_h2_dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg ref="h2_dataSource"/>
    </bean>
    <bean id="h2TransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="h2_dataSource"/>
    </bean>
    <!--开启事务控制的注解支持-->
    <tx:annotation-driven transaction-manager="h2TransactionManager"/>

    <!-- 初始化数据表结构 -->
    <!--<jdbc:initialize-database data-source="h2_dataSource" ignore-failures="ALL">
        <jdbc:script location="classpath:h2-sql/h2-init.sql" encoding="UTF-8"/>
    </jdbc:initialize-database>-->
    <!--===============================h2 DataSource end=============================-->


    <bean id="provider" class="com.maple.mvc.beans.lookup.BikeProvider">
        <lookup-method name="getBike" bean="ofo"/>
    </bean>

    <bean id="ofo" class="com.maple.mvc.beans.lookup.OfO">
        <replaced-method name="riding" replacer="helloBike"/>
    </bean>
    <bean id="moBai" class="com.maple.mvc.beans.lookup.MoBai"/>

    <bean id="helloBike" class="com.maple.mvc.beans.replaced.HelloBike"/>

    <!--<maple:bean id="dlao" name="myBike" ref="helloBike"/>-->


   <!-- <bus:producer>
        <bus:kafka-config topic="${kafka_topic}" kafka-host="${kafka_producer_host}"
                          kafka-tid-prefix="${kafka_tid_prefix}"/>
        <bus:task-poll data-source="h2_dataSource" service-name="com.maple.test.HelloService"/>
        <bus:biz-bus-bean class="com.maple.eventbus.bus.EventBus" data-source="tx_h2_dataSource"/>
    </bus:producer>-->

    <!--<bus:consumer/>-->
    


</beans>

